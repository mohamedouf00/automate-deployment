name: Deploy to EC2 with AMI Update and Rolling Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to Production"
        required: true
        default: "production"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials for authentication
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Change this with your region

      # Step 3: Define all variables and update EC2 instances by pulling the latest release for both apps
      - name: Define Variables and Update EC2
        run: |
          # Variables
          APP_INSTANCE_TAG="live-test"
          APP_ONE_PATH="/home/ubuntu/automate-deployment"
          APP_TWO_PATH="/home/ubuntu/automate-deployment-1"
          PM2_PROCESS="all" # Process name if using PM2
          TEMP_FILE_PATH="/tmp/app_versions.txt"
          LAUNCH_TEMPLATE_NAME="ouf-LT"
          AUTOSCALING_TAG="ouf-asg"

          # Get EC2 instance ID by Tag
          INSTANCE_ID=$(aws ec2 describe-instances --filters Name=tag:Name,Values="$APP_INSTANCE_TAG" --query "Reservations[*].Instances[*].InstanceId" --output text)

          # If the EC2 instance is not found, exit
          if [ -z "$INSTANCE_ID" ]; then
            echo "EC2 instance not found. Exiting."
            exit 1
          fi
          echo "Updating EC2 instance: $INSTANCE_ID"

            # Run SSM command to pull latest release and log version information
          aws ssm send-command \
            --instance-ids $INSTANCE_ID \
            --document-name "AWS-RunShellScript" \
            --parameters commands='[
              "cd '"$APP_ONE_PATH"'",
              "git fetch --all",
              "git checkout $(git describe --tags $(git rev-list --tags --max-count=1))",
              "VERSION_ONE=$(git describe --tags $(git rev-list --tags --max-count=1))",
              "echo Project One Version: $VERSION_ONE >> '"$TEMP_FILE_PATH"'",
              
              "cd '"$APP_TWO_PATH"'",
              "git fetch --all",
              "git checkout $(git describe --tags $(git rev-list --tags --max-count=1))",
              "VERSION_TWO=$(git describe --tags $(git rev-list --tags --max-count=1))",
              "echo Project Two Version: $VERSION_TWO >> '"$TEMP_FILE_PATH"'",
              
              "cat '"$TEMP_FILE_PATH"'",
              
              "cd '"$APP_ONE_PATH"' && npm install && npm run build",
              "pm2 restart $PM2_PROCESS",
              
              "cd '"$APP_TWO_PATH"' && npm install && npm run build",
              "pm2 restart $PM2_PROCESS"
            ]'
          echo "Update command sent to EC2 instance: $INSTANCE_ID"

      # Step 4: Create AMI from the updated EC2 instance
      - name: Create AMI from EC2
        run: |
          # Use the dynamically generated version numbers and current date
          AMI_NAME="App-AMI-$(date +'%Y-%m-%d')-project1-${VERSION_ONE}-project2-${VERSION_TWO}"

          # Create an AMI from the updated EC2 instance
          AMI_ID=$(aws ec2 create-image --instance-id $INSTANCE_ID --name "$AMI_NAME" --no-reboot --output text)
          if [ -z "$AMI_ID" ]; then
            echo "AMI creation failed. Exiting."
            exit 1
          fi
          echo "Created AMI: $AMI_ID"
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV

      # Step 5: Update the AWS Launch Template with the new AMI ID
      - name: Update Launch Template with new AMI
        run: |
          # Get the Launch Template ID
          TEMPLATE_ID=$(aws ec2 describe-launch-templates --query "LaunchTemplates[?LaunchTemplateName=='$LAUNCH_TEMPLATE_NAME'].LaunchTemplateId" --output text)

          # If Launch Template is not found, exit
          if [ -z "$TEMPLATE_ID" ]; then
            echo "Launch Template not found. Exiting."
            exit 1
          fi

          # Create a new version of the launch template with the new AMI
          aws ec2 create-launch-template-version --launch-template-id $TEMPLATE_ID --source-version 1 --launch-template-data '{"ImageId":"'"$AMI_ID"'"}'
          aws ec2 modify-launch-template --launch-template-id $TEMPLATE_ID --default-version 2
          echo "Launch Template updated with new AMI: $AMI_ID"

      # Step 6: Trigger a Rolling Update in the Auto Scaling Group
      - name: Trigger Rolling Update
        run: |
          # Get the Auto Scaling Group Name
          ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?Tags[?Key=='$AUTOSCALING_TAG']].AutoScalingGroupName" --output text)

          # If Auto Scaling Group is not found, exit
          if [ -z "$ASG_NAME" ]; then
            echo "Auto Scaling Group not found. Exiting."
            exit 1
          fi

          # Trigger an Instance Refresh to perform a rolling update
          aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}'
          echo "Triggered Rolling Update for Auto Scaling Group: $ASG_NAME"
